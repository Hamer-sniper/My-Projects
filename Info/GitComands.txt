// Задание настроек гит
git --version
git config --global user.name "Andrew Ahverdov"
git config --global user.email "wm-andrew@mail.ru"

// Просмотр настроек гит
git config --list

// Переход в папку с репозиторием
cd D:\Programming/DzSkillbox/ConsoleApp1
cd D:\Programming/DzSkillbox/WpfApp1

// Просмотреть все файлы в папке
$ ls -la

// Инициализация репозитория
 git init

// Отображение текущего состояния репозитория
git status

// Добавление в индекс всех файлов  \
git add .							 \  // Добавить коммит сразу, без git add .
									  > git commit -a -m 'First and second DZ'
// Добавление коммита			     /
git commit -m 'First and second DZ' /

// Содержимое последнего коммита (выйти q)
git show

// Просмотреть все коммиты
git log

// Помотреть путь к удаленному репозиторию
git remote -v

//Изменить удаленный репозиторий
git remote remove origin
git remote add origin https://github.com/Hamer-sniper/console-app-1.git

//Отправить в удаленный репозиторий и переключиться на него
git push -u origin master

// Отправить изменения в репозиторий origin
git push origin master

// Забирает, но не сливает изменения с локальными
git fetch

// Получить обновления с сервера (автоматически сливает с текущей веткой)
git pull

// Внести изменения в редакторе (vim) (если не изменять, то сообщение коммита по умолчанию)
i, далее esc и \/
:wq выход с сохранением
:q  выход (тогда сообщение коммита по умолчанию)
:q! выход без сохранения

// Изменили, но пока не проиндексировали
git diff

// Просмотреть проиндексированные изменения
git diff --cached

// Создать ветку			\
git branch new-branch		 \    // Создать ветку и переключиться
							  >   	     git -b new-branch
// Переключиться на ветку    /
git checkout new-branch	    /

// Просмотреть локальные ветки 
git branch

// Просмотреть локальные и удаленные ветки 
git branch -a

// Спрятать изменения 
git stash

// Вернуть спрятанные изменения 
git stash pop

// Просмотреть спрятанные изменения 
git stash list

// Удалить спрятанные изменения по номеру
git stash drop 0

// Слияние веток
git merge from-branch-name

// Установить meld для решения конфликтов
git config --global merge.tool meld

// Открыть редактор для решения конфликта
git mergetool

// Посмотреть изменения коммита
git diff index.html

// Посмотреть изменения коммита всех файлов
git diff

// Посмотреть разницу между коммитами (можно 4 символа ХЭШа)
git diff 54ad876543453453345(более раннего коммита)
54ad876543453453345(более позднего коммита) index.html

// Сравнение коммита с текущей версией
git diff 54ad876543453453345

// Посмотреть изменения пользователями
git blame index.html

// Откатить изменения (не добавленные в индекс)
git restore index.html

// Возвращает из индекса в рабочую дирректорию
git restore --staged index.html			  

// Удалить все незакомиченные изменения (и в индксе и нет)
git reset --hard

// Удалить новые файлы из индекса (и из каталога)
git clean -f

// Удалить из отслеживания новый закомиченный файл (После добавления в .gitignore)
git rm --cached config.json

////////////////////////////???
// Удалить все файлы из индекса
git reset
// Удалить конкретный файл из индекса
git reset myfile.cpp
////////////////////////////////

// Откатить коммит к определнному коммиту
откатить     хэш коммита имя файла
git checkout cf1a2347784 css/main.css

// Отменить конкретный коммит (без вывода строки комментария)
git revert --no-commit ewedfgfw7327r78

// Отменить последний коммит
git revert HEAD

// Сдвигает указатель на указанный коммит (Файлы добавлены в индекс)
git reset --soft sdfs3r545

// Сдвигает указатель на указанный коммит (Файлы не добавлены в индекс)
git reset --mixed dgsges44 (по умолчанию)

// Сдвигает указатель на указанный коммит
//(Файлы не остаются, последующие коммиты удаляются)
git reset --hard sdsf34f34

// Не правильно написан комментарий коммита
git commit --amend -m 'comment'

// Сначала добавляем файл в индекс, и след команда добавляет его в последний коммит
git commit --amend -m --no-edit

//Отменить слияние получившееся(хэш коммита который был до слияния)
git reset --merge sdfs3r545

//Отменить слияние не получившееся(когда выдал конфликт)
git merge --abort

//Переименовать ветку
git branch -m newName

//Удалить ветку
git branch -d название (проверяет влита ли ветка, если нет то не даст удалить)
git branch -D название (не проверяет влита ли ветка, даст удалить)